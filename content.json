[{"title":"vue学习笔记-1","date":"2017-02-24T13:58:58.000Z","path":"2017/02/24/vue学习笔记-1/","text":"今晚那该死的贝贝居然弃我而去，上了别人的床。俗话说的好，爱上一个不回家的人，有啥不一样！苦逼的程序猿只能继续敲代码了。 vue和react同时学习进行了一段时间后，还是准备先系统的学习一下vue，原因很简单，vue的官方文档友好太多,而且网上有太多的demo可以练习。 一、 VUE简介 Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。 Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。Vue.js 是用于构建交互式的 Web 界面的库。Vue.js 提供了 MVVM 数据绑定和一个可组合的组件系统，具有简单、灵活的 API。 Vue.js 特点 简洁： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。 数据驱动： 自动追踪依赖的模板表达式和计算属性。 组件化： 用解耦、可复用的组件来构造界面。 轻量： ~24kb min+gzip，无依赖。 快速： 精确有效的异步批量 DOM 更新。 模块友好： 通过 NPM 或 Bower 安装，无缝融入你的工作流。 喜欢vue的理由 可扩展的数据绑定机制 原生对象即模型 简洁明了的 API 组件化 UI 构建 多个轻量库搭配使用 vue起手式vue-cli脚手架: 官网介绍安装 vue-cli安装 下拉到命令行全局安装vue-cli npm install -g vue-cli 或 npm install –global vue-cli 初始化项目 vue init webpack vuedemo(你的项目名) 会出现提问，一路回车即可。随后 $ cd vuedemo(你的项目名) 安装webpack依赖 npm install npm镜像一般要换成淘宝镜像 npm install -g cnpm –registry=http://registry.npm.taobao.org 安装完成后,把项目跑起来: npm run dev 如上四个命令，就会自动打开一个浏览器窗口，你的第一个vue项目就跑起来。你编写的代码的时候，ctrl+s浏览器窗口会自动刷新 项目完成后，可以打包成线上包，指令为 npm run build","tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"},{"name":"前端小镇","slug":"前端小镇","permalink":"http://yoursite.com/tags/前端小镇/"},{"name":"框架","slug":"框架","permalink":"http://yoursite.com/tags/框架/"}]},{"title":"移动端踩坑实践","date":"2017-02-24T06:52:59.000Z","path":"2017/02/24/移动端踩坑实践/","text":"去年十一月份接手了一个项目,移动端webapp,已经经历了长达四个月的开发,迭代,维护。特此记录下实践过程中的坑,方便以后查阅。如有不对，请指正，谢谢！ ios端关于date() 兼容性问题 项目中有一关于返回的时间与某一时间戳对比的问题,时间戳返回的为数字,而时间返回的是 ‘2017-02-24 14:58:32’形式用,最开始使用的方法为: 1var dTime = (new Date(time)).getTime(); 但实际过程中发现ios端对此返回的是NaN.解决方案为: 1dTime = dTime.replace(/\\-/g, \"/\"); Android,Ios共用的是此种形式: 1var date =new Date(\"2016/05/31 08:00\"); 所以使用正则调整为两者皆可的形式即可。 Html5日历控件赋值问题 HTML5中新增了日历控件，如果将控件的type=“datetime-local”，如果是Chrome，控件的日期显示格式是2016/05/30 08:00 ，如果是Safari，日期的显示格式是：2016-05-31T08:00，当我们用jQuery取值赋值的时候，就必须用这种方式才能赋值： 12let dTime = '2016-05-30T08:30'$(\"#timeDate\").val(dTime) 抽空继续总结，未完待续…","tags":[{"name":"前端小镇","slug":"前端小镇","permalink":"http://yoursite.com/tags/前端小镇/"},{"name":"移动端","slug":"移动端","permalink":"http://yoursite.com/tags/移动端/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"iframe父子页面通信实现","date":"2017-02-23T14:11:08.000Z","path":"2017/02/23/iframe父子页面通信实现/","text":"近来有一需求，即在PC端erp内嵌移动官网，通过iframe来实现嵌套的，但是又需要实现在父页面添加prev，next按钮，最后通过设置页面简单路由的方式来解决了。借此，系统学了下iframe父子页面通信。 一、 同域下父子页面通信 先来看具体实现 parent.html 1234567891011121314151617&lt;html&gt;&lt;head&gt; &lt;script type=\"text/javascript\"&gt; function say()&#123; alert(\"parent.html\"); &#125; function callChild()&#123; myFrame.window.say(); myFrame.window.document.getElementById(\"button\").value=\"调用结束\"; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=\"button\" type=\"button\" value=\"调用child.html中的函数say()\" onclick=\"callChild()\"/&gt; &lt;iframe name=\"myFrame\" src=\"child.html\"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt; 未完待续…","tags":[{"name":"iframe","slug":"iframe","permalink":"http://yoursite.com/tags/iframe/"},{"name":"router","slug":"router","permalink":"http://yoursite.com/tags/router/"},{"name":"跨域","slug":"跨域","permalink":"http://yoursite.com/tags/跨域/"}]}]